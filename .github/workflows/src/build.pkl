amends "lib/base.pkl"
import "lib/common.pkl"

local platforms = "linux/amd64,linux/ppc64le,linux/386,linux/s390x,linux/arm/v7,linux/arm64/v8,linux/arm/v6,linux/riscv64"

local function dockerJob(login: Step, reference: String): Job = new Job {
    needs = new Listing {
        "version"
    }
    permissions = new Mapping {
        ["contents"] = "read"
        ["packages"] = "write"
    }
    steps = new Listing {
        common.checkout
        common.currentNginxVersion
        ...common.dockerSetup
        login
        (common.dockerBuild) {
            `if` = "github.ref == 'refs/heads/main'"
            with = new Mapping {
                ["context"] = "."
                ["platforms"] = platforms
                ["push"] = true
                ["tags"] = """
                \(reference):latest
                \(reference):nightly
                \(reference):${{ needs.version.outputs.major }}-nightly
                \(reference):${{ needs.version.outputs.major }}
                \(reference):${{ needs.version.outputs.version }}
                """
                ["build-args"] = "NGINX_VERSION=${{ env.NGINX_VERSION }}"
            }
        }
        (common.dockerBuild) {
            `if` = "github.ref != 'refs/heads/main'"
            with = new Mapping {
                ["context"] = "."
                ["platforms"] = platforms
                ["push"] = true
                ["tags"] = """
                \(reference):nightly
                \(reference):${{ needs.version.outputs.major }}-nightly
                \(reference):${{ needs.version.outputs.version }}
                """
                ["build-args"] = "NGINX_VERSION=${{ env.NGINX_VERSION }}"
            }
        }
    }
}

name = "Build"

on = new On {
    push = new Push {
        branches = new Listing {
            "main"
            "develop"
        }
    }
}

permissions = new Mapping {
    ["contents"] = "write"
}

jobs = new Mapping {
    ["version"] = new Job {
        outputs = new Mapping {
            ["version"] = "${{ steps.gitversion.outputs.semVer }}"
            ["major"] = "${{ steps.gitversion.outputs.major }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install GitVersion"
                uses = "gittools/actions/gitversion/setup@v3.0.0"
                with = new Mapping {
                    ["versionSpec"] = "5.x"
                }
            }
            new ActionStep {
                name = "Use GitVersion"
                id = "gitversion"
                uses = "gittools/actions/gitversion/execute@v3.0.0"
                with = new Mapping {
                    ["useConfigFile"] = true
                    ["configFilePath"] = "./gitversion.yml"
                }
            }
            new CommandStep {
                name = "Generate Job Summary"
                run = "echo \"# Version Info\nSemantic Version: ${{ steps.gitversion.outputs.semVer }}\" >> $GITHUB_STEP_SUMMARY"
            }
        }
    }
    ["release"] = new Job {
        needs = new Listing {
            "version"
        }
        `if` = "github.event_name != 'pull_request'"
        permissions = new Mapping {
            ["contents"] = "write"
        }
        outputs = new Mapping {
            ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Create tag for release"
                uses = "rickstaa/action-create-tag@v1"
                with = new Mapping {
                    ["tag"] = "v${{ needs.version.outputs.version }}"
                }
            }
            new ActionStep {
                id = "create_release"
                uses = "softprops/action-gh-release@v2"
                env = new Mapping {
                    ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                }
                with = new Mapping {
                    ["tag_name"] = "v${{ needs.version.outputs.version }}"
                    ["name"] = "Release ${{ needs.version.outputs.version }}"
                    ["prerelease"] = "${{ github.ref == 'refs/heads/develop' }}"
                }
            }
        }
    }
    ["docker-ghcr"] = dockerJob(
        new ActionStep {
            name = "Log in to the Container registry"
            uses = "docker/login-action@v3"
            with = new Mapping {
                ["registry"] = "https://ghcr.io"
                ["username"] = "${{ github.actor }}"
                ["password"] = "${{ secrets.GITHUB_TOKEN }}"
            }
        },
        "${{ vars.LOCAL_DOCKER_REFERENCE }}"
    )
    ["docker-docker"] = dockerJob(
        new ActionStep {
            name = "Log in to the Container registry"
            uses = "docker/login-action@v3"
            with = new Mapping {
                ["username"] = "${{ vars.DOCKER_USERNAME }}"
                ["password"] = "${{ secrets.DOCKER_PAT }}"
            }
        },
        "${{ vars.DOCKER_DOCKER_REFERENCE }}"
    )
}.toMap().filter((k,v) -> v != null).toMapping()